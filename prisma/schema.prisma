generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use .env file for your database URL
}

model User {
  id          String    @id @default(uuid())
  clerkUserId String    @unique // clerk user id
  name        String
  email       String    @unique
  phone       String?
  imageUrl    String
  role        Role      @default(CUSTOMER) // CUSTOMER, EMPLOYEE, or ADMIN
  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  categories  Category[]
  branches    BranchService[] // Many-to-many through BranchService
  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Branch {
  id        String          @id @default(uuid())
  name      String
  address   String
  phone     String
  imageUrl  String
  services  BranchService[] // Many-to-many through BranchService
  bookings  Booking[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model BranchService {
  id        String   @id @default(uuid())
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())

  @@unique([branchId, serviceId]) // Ensures a branch and service combination is unique
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String?
  price          Float
  promotionPrice Float?
  imageUrl       String?
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Booking {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  service   Service       @relation(fields: [serviceId], references: [id])
  serviceId String
  branch    Branch        @relation(fields: [branchId], references: [id])
  branchId  String
  dateTime  DateTime
  status    BookingStatus @default(PENDING)
  payment   Payment?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Payment {
  id        String        @id @default(uuid())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}
